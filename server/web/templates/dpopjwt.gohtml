{{template "header" .}}

<script src="/js/ws.js" type="text/javascript"></script>
<script src="https://cdn.jsdelivr.net/npm/js-base64@3.7.7/base64.min.js"></script>

  <div id="content" class="ui text container-fluid">

    <div class="container">
      <div class="row g-4">
        
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureDpopJwt">Configure</button>
          {{/* <form action="/dpop/upload_priv_key" method="post" enctype="multipart/form-data">
            <label for="file">File</label>
            <input id="priv_key" name="priv_key" type="file" />
            <button>Upload</button>
          </form> */}}
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" onclick="generateJWT()">Generate</button>
        </div>
        {{/* <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="registration">Registration Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="telephony">Telephony Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="saml">SAML Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="token">Token Hook</button>
        </div> */}}
        
      </div>
    </div> 


    <div class="modal fade" id="configureDpopJwt" tabindex="-1" aria-labelledby="configureDpopJwtLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">

        

          <div class="modal-body">

            <ul class="nav nav-tabs" id="myTab" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="jwt-tab" data-bs-toggle="tab" data-bs-target="#jwt" type="button" role="tab" aria-controls="jwt" aria-selected="true">JWT</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="service-tab" data-bs-toggle="tab" data-bs-target="#service" type="button" role="tab" aria-controls="service" aria-selected="false">Service App</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="auth-tab" data-bs-toggle="tab" data-bs-target="#auth" type="button" role="tab" aria-controls="auth" aria-selected="false">Auth Code</button>
              </li>
            </ul>

            <div class="tab-content" id="myTabContent">
              <div class="tab-pane fade show active" id="jwt" role="tabpanel" aria-labelledby="jwt-tab">
                <form action="/dpop/jwt-config" method="post">
                  <div class="mb-3">
                    <label for="jwt-issuer" class="col-form-label">Issuer:</label>
                    <input type="text" name="issuer" class="form-control" id="jwt-issuer" placeholder="<required>">
                    <label for="jwt-client-id" class="col-form-label">Client id:</label>
                    <input type="text" name="client-id" class="form-control" id="jwt-client-id" placeholder="<required>">
                    <div>
                      <label for="jwt-priv-key" class="col-form-label">Private key:</label>
                      <input type="text" name="priv-key" class="form-control" id="jwt-priv-key" placeholder="<required>" ondrop="drop(event)" ondragover="dragOverHandler(event);">
                      <input type="text" name="priv-key-enc" class="form-control" id="jwt-priv-key-enc" hidden>
                    </div>
                    <hr/>
                    <label for="jwt-priv-key-id" class="col-form-label">Private key id:</label>
                    <input type="text" name="priv-key-id" class="form-control" id="jwt-priv-key-id" placeholder="<optional>">
                    
                    <input id="jwt-submit" type="submit" hidden/>
                  </div>
                </form>
              </div>

              <div class="tab-pane fade" id="service" role="tabpanel" aria-labelledby="service-tab">
                <form action="/dpop/service-config" method="post">
                  <div class="mb-3">
                    <label for="service-issuer" class="col-form-label">Issuer:</label>
                    <input type="text" name="issuer" class="form-control" id="service-issuer" placeholder="<required>">
                    <label for="service-client-id" class="col-form-label">Client id:</label>
                    <input type="text" name="client-id" class="form-control" id="service-client-id" placeholder="<required>">
                    <label for="service-scopes" class="col-form-label">Scopes:</label>
                    <input type="text" name="scopes" class="form-control" id="service-scopes" placeholder="<required>">
                    <hr/>
                    <label for="service-client-secret" class="col-form-label">Client secret:</label>
                    <input type="text" name="client-secret" class="form-control" id="service-client-secret" placeholder="<optional>">
                    
                    <div >
                      <label for="service-priv-key" class="col-form-label">Private key:</label>
                      <input type="text" name="priv-key" class="form-control" id="service-priv-key" placeholder="<optional>" ondrop="drop(event)" ondragover="dragOverHandler(event);">
                      <input type="text" name="priv-key-enc" class="form-control" id="service-priv-key-enc" hidden>
                    </div>
                    <label for="service-priv-key-id" class="col-form-label">Private key id:</label>
                    <input type="text" name="priv-key-id" class="form-control" id="service-priv-key-id" placeholder="<optional>">
                    
                    <div  >
                      <label for="service-dpop-key" class="col-form-label">DPoP key:</label>
                      <input type="text" name="dpop-key" class="form-control" id="service-dpop-key" placeholder="<optional>" ondrop="drop(event)" ondragover="dragOverHandler(event);">
                      <input type="text" name="dpop-key-enc" class="form-control" id="service-dpop-key-enc" hidden>
                    </div>

                    <label for="service-endpoint" class="col-form-label">API Endpoint:</label>
                    <input type="text" name="service-endpoint" class="form-control" id="service-endpoint" placeholder="<optional>">
                    <label for="service-method" class="col-form-label">API method:</label>
                    <input type="text" name="service-method" class="form-control" id="service-method" placeholder="<optional>">

                    <input id="service-submit" type="submit" hidden/>
                  </div>
                </form>
              </div>

              <div class="tab-pane fade" id="auth" role="tabpanel" aria-labelledby="auth-tab">
                <form action="/dpop/auth-config" method="post">
                  <div class="mb-3">
                    <label for="auth-issuer" class="col-form-label">Issuer:</label>
                    <input type="text" name="issuer" class="form-control" id="auth-issuer" placeholder="<required>">
                    <label for="auth-client-id" class="col-form-label">Client id:</label>
                    <input type="text" name="client-id" class="form-control" id="auth-client-id" placeholder="<required>">
                    <label for="auth-scopes" class="col-form-label">Scopes:</label>
                    <input type="text" name="scopes" class="form-control" id="auth-scopes" placeholder="<required>">
                    <hr/>
                    <label for="auth-client-secret" class="col-form-label">Client secret:</label>
                    <input type="text" name="client-secret" class="form-control" id="auth-client-secret" placeholder="<optional>">
                    <label for="auth-code" class="col-form-label">Authorization Code:</label>
                    <input type="text" name="auth-code" class="form-control" id="auth-code" placeholder="<optional>">
                    <label for="auth-code-verifier" class="col-form-label">Code Verifier:</label>
                    <input type="text" name="auth-code-verifier" class="form-control" id="auth-code-verifier" placeholder="<optional>">
                    <label for="auth-redirect-uri" class="col-form-label">Redirect URI:</label>
                    <input type="text" name="redirect-uri" class="form-control" id="auth-redirect-uri" placeholder="<optional>">
                    <label for="auth-port" class="col-form-label">Port:</label>
                    <input type="text" name="port" class="form-control" id="auth-port" placeholder="<optional>">
           
                    <label for="auth-endpoint" class="col-form-label">API Endpoint:</label>
                    <input type="text" name="auth-endpoint" class="form-control" id="auth-endpoint" placeholder="<optional>">
                    <label for="auth-method" class="col-form-label">API method:</label>
                    <input type="text" name="auth-method" class="form-control" id="auth-method" placeholder="<optional>">

                    <input id="auth-submit" type="submit" hidden/>
                  </div>
                </form>
              </div>
            </div>

                  
              {{/* <div class="mb-3">
                <textarea style="resize:none" class="form-control" id="editHookTextArea" name="editHookTextArea" rows="20" cols="25"></textarea>
              </div>
              <hr/> */}}
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="saveDpopJwtConfig()">Save</button>
          </div> 
        </div> 
      </div>
    </div>   


    {{/* <div class="container">
      <h5 style="text-align:center">Hook Messages from Okta</h5>
        <div>
          <textarea style="resize:none" class="form-control" id="hooksReceiveMessageArea" name="hooksReceiveMessageArea" rows="30" cols="10" readonly></textarea>
        </div>
    </div> */}}

    <div class="row">
      <div class="col-6"> 
        <div class="container-fluid">
          <h5 style="text-align:center">Debug</h5>
          <div>
            <textarea style="resize:none" class="form-control" id="debugArea" name="debugArea" rows="30" cols="10" readonly></textarea>
          </div>
        </div>
      </div>

      <div class="col-6">
        <div class="container-fluid">
          <h5 style="text-align:center">Result</h5>
          <div>
            <textarea style="resize:none" class="form-control" id="resultArea" name="resultArea" rows="30" cols="10" readonly></textarea>
          </div>
        </div>
      </div>
    </div>

  </div>






<script type="text/javascript">
    
    function drop(ev) {
      ev.target.style = "";
      ev.preventDefault();
      var data = ev.dataTransfer.getData("text");
      //console.log('data')
      //console.log(data)
      
      if (ev.dataTransfer.files.length > 0) {
        const reader = new FileReader();
        {{/* var keyElement;
        var keyElementEnc;
        if (ev.target.id === 'jwt-priv-key') {
          keyElement = 'jwt-priv-key';
          keyElementEnc = 'jwt-priv-key-enc';
        } else if (ev.target.id === 'service-priv-key') {
          keyElement = 'jwt-priv-key';
          keyElementEnc = 'jwt-priv-key-enc';
        } */}}
        const keyElement = ev.target.id;
        const keyElementEnc = `${keyElement}-enc`

        reader.addEventListener(
          "load",
          () => {
            //console.log(reader.result);
            document.getElementById(keyElementEnc).value = Base64.encode(reader.result);
            document.getElementById(keyElement).value = 'Private Key Set';
            document.getElementById(keyElement).disabled = true;
          },
          false,
        );

        reader.readAsText(ev.dataTransfer.files[0]);
      }
    }
  
    function dragOverHandler(ev) {
      ev.target.style="border-width: thick";
      // Prevent default behavior (Prevent file from being opened)
      ev.preventDefault();
    }

    function pasteEvent(ev) {
      const keyElement = ev.target.id;
      const keyElementEnc = `${keyElement}-enc`

      document.getElementById(keyElementEnc).value = Base64.encode((ev.clipboardData || window.clipboardData).getData("text"));
      document.getElementById(keyElement).value = 'Private Key Set';
      document.getElementById(keyElement).disabled = true;
    }

    document.querySelector("#jwt form").addEventListener('submit', saveDpopJwtConfig);
    document.getElementById('jwt-priv-key').addEventListener("paste", pasteEvent);
    document.getElementById('service-priv-key').addEventListener("paste", pasteEvent);

    /*
      WS support
    */
    /*
    function intiializeHooksReceiverWS() {
      console.log("Attempting intiializeHooksReceiverWS Connection...");
      if (window.location.protocol.includes("https")) {
          console.log("Attempting wss..");
          hooksReceiveSocket = new WebSocket("wss://" + location.host + "/hooks/inline/ws");
      } else {
          hooksReceiveSocket = new WebSocket("ws://" + location.host + "/hooks/inline/ws");
      }
     
      hooksReceiveSocket.onopen = () => {
          console.log("Successfully Connected intiializeHooksReceiverWS()");
          hooksReceiveWsPing();
      };

      hooksReceiveSocket.onmessage = hooksReceiveOnMessage;
      hooksReceiveSocket.onclose = hooksReceiveOnClose;
      hooksReceiveSocket.onerror = hooksReceiveOnError;
    }

    function hooksReceiveOnMessage(event) {
      console.log('hooksReceiveOnMessage message received')
      console.log(event.data);
      const jsonObj = JSON.parse(event.data);
      var msg = createMessageReceivedHeader(jsonObj.type);
      
      msg += '   ----- Request -----\n';
      msg += JSON.stringify(jsonObj.request, '', 2)
      msg += '\n----------------------------------------\n';
      msg += '   ----- Response -----\n';
      msg += JSON.stringify(jsonObj.response, '', 2)

      {-{/-* msg += JSON.stringify(jsonObj, '', 2) *-/}-}
      
      msg += '\n' + document.getElementById('hooksReceiveMessageArea').value;
      document.getElementById('hooksReceiveMessageArea').value = msg;
      document.getElementById('hooksReceiveMessageArea').scrollTo(0, 0);
    }

    function hooksReceiveOnClose(event) {
      console.log("hooksReceiveOnClose Socket Closed Connection: ", event);
      hooksReceiveSocket.send("Client Closed!")
    }

    function hooksReceiveOnError(error) {
      console.log("hooksReceiveOnError Socket Error: ", error);
    }

    function hooksReceiveSendMessage(msg) {
      hooksReceiveSocket.send(msg);
    }

    function hooksReceiveWsPing() {
      if (!hooksReceiveSocket) return;
      if (hooksReceiveSocket.readyState !== 1) return;
      hooksReceiveSendMessage('{"uuid": "ping"}');
      setTimeout(hooksReceiveWsPing, 10000);
    }


    /-*
      Helpers
    *-/
    function createMessageReceivedHeader(hookType) {
      return `
-------------------------------------------------------------------
              Received ${hookType}                          
-------------------------------------------------------------------
`
    }
    */
    function saveDpopJwtConfig(event) {
      //console.log(event);
      const activeTab = document.querySelector(".nav-link.active");
      if (activeTab.id === 'jwt-tab') {
        document.getElementById('jwt-submit').click();
      } else if (activeTab.id === 'service-tab') {
        document.getElementById('service-submit').click();
      } else if (activeTab.id === 'auth-tab') {
        document.getElementById('auth-submit').click();
      } else {
        // ?
        console.log(`Unexpected value for activeTab: ${activeTab}`);
        return;
      }
    }

    function generateJWT() {
      fetch(location.origin + '/dpop/generate_dpop')
      .then(response => {
        if (!response.ok) {
          alert('Failed to load content from: ' + url + '\nStatus: ' + response.statusText);
          return;
        }
        response.json()
        .then(data => {
          const result = JSON.stringify(data, null, "  ");
          console.log(result);
          const el = document.getElementById('resultArea');
          el.value = `${resultHeader()}${result}\n\n${el.value}`;
        });
      }).catch(err => {
        console.log(err);
        alert('Failed to load content from: \nError: ' + err);
      });
    }

    function resultHeader() {
      return '          ----------  RESULT ----------\n\n'
    } 

</script>

{{template "footer"}}