{{template "header" .}}

<script src="/js/ws.js" type="text/javascript"></script>


  <div id="content" class="ui text container-fluid">

    <div class="container">
      <div class="row g-4">
        
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="import">Import Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="password">Password Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="registration">Registration Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="telephony">Telephony Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="saml">SAML Hook</button>
        </div>
        <div class="col">
          <button type="button" class="btn btn-outline-dark me-2" data-bs-toggle="modal" data-bs-target="#configureHookModal" data-bs-hooktype="token">Token Hook</button>
        </div>
        
      </div>
    </div> 


    <div class="modal fade" id="configureHookModal" tabindex="-1" aria-labelledby="configureHookModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-body">
              <div class="mb-3">
                <textarea style="resize:none" class="form-control" id="editHookTextArea" name="editHookTextArea" rows="20" cols="25"></textarea>
              </div>
              <hr/>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" onclick="saveHookConfig()">Save</button>
          </div>
        </div>
      </div>
    </div>   


    <div class="container">
      <h5 style="text-align:center">Hook Messages from Okta</h5>
        <div>
          <textarea style="resize:none" class="form-control" id="hooksReceiveMessageArea" name="hooksReceiveMessageArea" rows="30" cols="10" readonly></textarea>
        </div>
    </div>

  </div>






<script type="text/javascript">
    var hooksReceiveSocket;
    var hookType;
    intiializeHooksReceiverWS();

    /*
      Hook Modal Support
    */
    var configureHookModal = document.getElementById('configureHookModal');
    configureHookModal.addEventListener('show.bs.modal', function (event) {
      // Button that triggered the modal
       var button = event.relatedTarget
      // Extract info from data-bs-* attributes
      hookType = button.getAttribute('data-bs-hooktype')
      // Update the modal's content.
      var editHookTextArea = configureHookModal.querySelector('#editHookTextArea')
      //var resource = '';

      {{/* switch (hookType) {
        case 'token':
          editHookTextArea.value = {{.Hooks.Token}};
          break;
        case 'telephony':
          //resource = '/raw/hooks/telephony.json';
          editHookTextArea.value = {{.Hooks.Telephony}};
          break;
        case 'saml':
          editHookTextArea.value = {{.Hooks.Saml}};
          break;
        case 'registration':
          editHookTextArea.value = {{.Hooks.Registration}};
          break;
        case 'password':
          editHookTextArea.value = {{.Hooks.Password}};
          break;
        case 'import':
          editHookTextArea.value = {{.Hooks.UserImport}};
          break;
        default:
          editHookTextArea.textContent = {{.Hooks.Token}};
      } */}}

      fetchTemplateData(location.origin +  '/hooks/inline/config?type=' + event.relatedTarget.getAttribute('data-bs-hooktype'), editHookTextArea);
    })


    /*
      WS support
    */
    function intiializeHooksReceiverWS() {
      console.log("Attempting intiializeHooksReceiverWS Connection...");
      if (window.location.protocol.includes("https")) {
          console.log("Attempting wss..");
          hooksReceiveSocket = new WebSocket("wss://" + location.host + "/hooks/inline/ws");
      } else {
          hooksReceiveSocket = new WebSocket("ws://" + location.host + "/hooks/inline/ws");
      }
     
      hooksReceiveSocket.onopen = () => {
          console.log("Successfully Connected intiializeHooksReceiverWS()");
          hooksReceiveWsPing();
      };

      hooksReceiveSocket.onmessage = hooksReceiveOnMessage;
      hooksReceiveSocket.onclose = hooksReceiveOnClose;
      hooksReceiveSocket.onerror = hooksReceiveOnError;
    }

    function hooksReceiveOnMessage(event) {
      console.log('hooksReceiveOnMessage message received')
      console.log(event.data);
      const jsonObj = JSON.parse(event.data);
      var msg = createMessageReceivedHeader(jsonObj.type);
      
      msg += '   ----- Request -----\n';
      msg += JSON.stringify(jsonObj.request, '', 2)
      msg += '\n----------------------------------------\n';
      msg += '   ----- Response -----\n';
      msg += JSON.stringify(jsonObj.response, '', 2)

      {{/* msg += JSON.stringify(jsonObj, '', 2) */}}
      
      msg += '\n' + document.getElementById('hooksReceiveMessageArea').value;
      document.getElementById('hooksReceiveMessageArea').value = msg;
      document.getElementById('hooksReceiveMessageArea').scrollTo(0, 0);
    }

    function hooksReceiveOnClose(event) {
      console.log("hooksReceiveOnClose Socket Closed Connection: ", event);
      hooksReceiveSocket.send("Client Closed!")
    }

    function hooksReceiveOnError(error) {
      console.log("hooksReceiveOnError Socket Error: ", error);
    }

    function hooksReceiveSendMessage(msg) {
      hooksReceiveSocket.send(msg);
    }

    function hooksReceiveWsPing() {
      if (!hooksReceiveSocket) return;
      if (hooksReceiveSocket.readyState !== 1) return;
      hooksReceiveSendMessage('{"uuid": "ping"}');
      setTimeout(hooksReceiveWsPing, 10000);
    }


    /*
      Helpers
    */
    function createMessageReceivedHeader(hookType) {
      return `
-------------------------------------------------------------------
              Received ${hookType}                          
-------------------------------------------------------------------
`
    }

    function saveHookConfig() {
      var editHookTextArea = configureHookModal.querySelector('#editHookTextArea')
      sendPost(location.origin + '/hooks/inline/config?type=' + hookType, editHookTextArea.value, ()=>{ console.log('saveHookConfig success') });
    }

</script>

{{template "footer"}}